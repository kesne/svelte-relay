(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[612],{4635:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return d}});var a=n(7711);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,f=p["".concat(l,".").concat(d)]||p[d]||c[d]||i;return n?a.createElement(f,o(o({ref:t},m),{},{components:n})):a.createElement(f,o({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},75:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return m},default:function(){return p}});var a=n(7518),r=n(630),i=(n(7711),n(4635)),o=["components"],s={title:"Mutations"},l=void 0,u={unversionedId:"usage/mutations",id:"usage/mutations",isDocsHomePage:!1,title:"Mutations",description:"In GraphQL, data in the server is updated using GraphQL Mutations. Mutations are read-write server operations, which both modify data in the backend, and allow querying for the modified data from the server in the same request.",source:"@site/docs/usage/mutations.md",sourceDirName:"usage",slug:"/usage/mutations",permalink:"/svelte-relay/docs/usage/mutations",editUrl:"https://github.com/kesne/svelte-relay/edit/master/website/docs/usage/mutations.md",version:"current",frontMatter:{title:"Mutations"},sidebar:"someSidebar",previous:{title:"Using Fragments",permalink:"/svelte-relay/docs/usage/using-fragments"},next:{title:"Subscriptions",permalink:"/svelte-relay/docs/usage/subscriptions"}},m=[{value:"Waiting for Mutations",id:"waiting-for-mutations",children:[]},{value:"Reading Current Mutation State",id:"reading-current-mutation-state",children:[]}],c={toc:m};function p(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In GraphQL, data in the server is updated using GraphQL Mutations. Mutations are read-write server operations, which both modify data in the backend, and allow querying for the modified data from the server in the same request."),(0,i.kt)("p",null,"To set up a mutation in Svelte Relay, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"getMutation()")," function. This function accepts a GraphQL query, and returns a function that can be used to perform the mutation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="UserFirstName.svelte"',title:'"UserFirstName.svelte"'},"<script>\n    import { getMutation, graphql } from 'svelte-relay';\n\n    const commit = getMutation(graphql`\n        mutation UserFirstNameMutation($firstName: String!) {\n            setFirstName(firstName: $firstName) {\n                id\n                firstName\n            }\n        }\n    `);\n\n    let firstName = '';\n\n    function handleSubmit() {\n        commit({\n            variables: {\n                firstName,\n            }\n        })\n    }\n<\/script>\n\n<form on:submit|preventDefault={handleSubmit}>\n    First Name: <input bind:value={firstName} />\n    <button type=\"submit\">Save</button>\n</form>\n")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"After creating this file, you will need to run the ",(0,i.kt)("inlineCode",{parentName:"p"},"relay-compiler")," to process the newly-created GraphQL query and generate the appropriate files."))),(0,i.kt)("p",null,"The options that the ",(0,i.kt)("inlineCode",{parentName:"p"},"commit()")," function accepts is the same as the Relay ",(0,i.kt)("inlineCode",{parentName:"p"},"commitMutation()")," method. Read ",(0,i.kt)("a",{parentName:"p",href:"https://relay.dev/docs/en/mutations"},"the Relay Documentation for more details")," on these options.."),(0,i.kt)("h2",{id:"waiting-for-mutations"},"Waiting for Mutations"),(0,i.kt)("p",null,"Often, you will perform some action after a ",(0,i.kt)("inlineCode",{parentName:"p"},"commit()")," succeeds or fails. For example, performing navigation to a new page, or displaying a toast to inform the user that the action completed successfully."),(0,i.kt)("p",null,"To support these experiences, the return value from calling ",(0,i.kt)("inlineCode",{parentName:"p"},"commit()")," is promise. This promise can be awaited, and will be resolved with the data returned from the server."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"async function handleSubmit() {\n    await commit({ variables });\n    navigate('/new/page');\n}\n")),(0,i.kt)("p",null,"If an error occurs in the mutation, the promise will be rejected with the error. You can use try/catch to handle these errors."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"async function handleSubmit() {\n    try {\n        await commit({ variables });\n        navigate('/new/page');\n    } catch (e) {\n        displayToast(`An error ocurred: ${e.message}`);\n    }\n}\n")),(0,i.kt)("h2",{id:"reading-current-mutation-state"},"Reading Current Mutation State"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"commit")," returned from ",(0,i.kt)("inlineCode",{parentName:"p"},"getMutation()")," is a Svelte Store that contains state:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"isInFlight"))," - If the mutation HTTP request is currently in-flight. Starts with ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"data"))," - The response data from the server if the mutation succeeds. Starts with ",(0,i.kt)("inlineCode",{parentName:"li"},"undefined"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"error"))," - The error data from the server if the mutation fails. Starts with ",(0,i.kt)("inlineCode",{parentName:"li"},"undefined"),".")),(0,i.kt)("p",null,"This state is useful for loading state, disabling buttons, and showing success states in the UI when a commit succeeds."),(0,i.kt)("p",null,"To read this state, you can use the ",(0,i.kt)("a",{parentName:"p",href:"https://svelte.dev/tutorial/auto-subscriptions"},"Svelte Store Auto-subscriptions"),", and read the state by prefixing the variable with ",(0,i.kt)("inlineCode",{parentName:"p"},"$"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"<script>\n    import { getMutation, graphql } from 'svelte-relay';\n\n    const commit = getMutation(graphql`\n        mutation DoSomethingMutation {\n            doSomething\n        }\n    `);\n<\/script>\n\n{#if $commit.data}\n    <div>Commit completed!</div>\n{:else if $commit.error}\n    <div>Error: {$commit.error.message}</div>\n{:else}\n    <button disabled={$commit.isInFlight} on:click={() => commit()}>Commit</button>\n{/if}\n")))}p.isMDXComponent=!0}}]);