(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[221],{4635:function(e,t,r){"use strict";r.d(t,{Zo:function(){return c},kt:function(){return d}});var n=r(7711);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=u(r),d=a,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||i;return r?n.createElement(f,o(o({ref:t},c),{},{components:r})):n.createElement(f,o({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},119:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return m}});var n=r(7518),a=r(630),i=(r(7711),r(4635)),o=["components"],s={title:"Making Queries"},l=void 0,u={unversionedId:"usage/making-queries",id:"usage/making-queries",isDocsHomePage:!1,title:"Making Queries",description:"A GraphQL query is a request that can be sent to a GraphQL server in combination with a set of variables, in order to fetch some data. It consists of a selection of fields, and potentially includes other fragments.",source:"@site/docs/usage/making-queries.md",sourceDirName:"usage",slug:"/usage/making-queries",permalink:"/svelte-relay/docs/usage/making-queries",editUrl:"https://github.com/kesne/svelte-relay/edit/master/website/docs/usage/making-queries.md",version:"current",frontMatter:{title:"Making Queries"},sidebar:"someSidebar",previous:{title:"Providing The Environment",permalink:"/svelte-relay/docs/usage/providing-the-environment"},next:{title:"Using Fragments",permalink:"/svelte-relay/docs/usage/using-fragments"}},c=[{value:"Passing Variables",id:"passing-variables",children:[]}],p={toc:c};function m(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A GraphQL query is a request that can be sent to a GraphQL server in combination with a set of variables, in order to fetch some data. It consists of a selection of fields, and potentially includes other fragments."),(0,i.kt)("p",null,"To fetch and render a query in Svelte Relay, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"getQuery()")," function. This function accepts a GraphQL query. Let's set up our first query and a component to display the data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="User.svelte"',title:'"User.svelte"'},"<script>\n    import { getQuery, graphql } from 'svelte-relay';\n    const query = getQuery(graphql`\n        query UserQuery {\n            currentUser {\n                id\n                firstName\n                lastName\n            }\n        }\n    `);\n<\/script>\n")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"After creating this file, you will need to run the ",(0,i.kt)("inlineCode",{parentName:"p"},"relay-compiler")," to process the newly-created GraphQL query and generate the appropriate files."))),(0,i.kt)("p",null,"To consume the data from the query, we can use the ",(0,i.kt)("a",{parentName:"p",href:"https://svelte.dev/tutorial/await-blocks"},"Svelte await block"),". This allows us to wait for a Promise to resolve, and display different UIs based on the error or loading state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="User.svelte"',title:'"User.svelte"'},"{#await $query}\n<div>Loading...</div>\n{:then data}\n<h1>{data.currentUser.firstName} {data.currentUser.lastName}</h1>\n{:catch error}\n<div>Error: {error.message}</div>\n{/await}\n")),(0,i.kt)("p",null,"The return value of ",(0,i.kt)("inlineCode",{parentName:"p"},"getQuery()")," is a ",(0,i.kt)("a",{parentName:"p",href:"https://svelte.dev/tutorial/auto-subscriptions"},"Svelte Store"),". By prefixing it with ",(0,i.kt)("inlineCode",{parentName:"p"},"$"),", we automatically subscribe to the latest data from the GraphQL query."),(0,i.kt)("h2",{id:"passing-variables"},"Passing Variables"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"getQuery()")," method accepts a second argument, which is the variables to provide to the query."))}m.isMDXComponent=!0}}]);